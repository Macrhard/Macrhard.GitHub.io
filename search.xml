<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>RHCSA</title>
      <link href="/2018/03/31/RHCSA/"/>
      <url>/2018/03/31/RHCSA/</url>
      <content type="html"><![CDATA[<a id="more"></a><p><a href="http://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">参考连接</a></p><!--more--><h3 id="权限：rwx"><a href="#权限：rwx" class="headerlink" title="权限：rwx"></a>权限：rwx</h3><div class="table-container"><table><thead><tr><th>文件类型</th><th>属主权限</th><th>属组权限</th><th>其他用户</th></tr></thead><tbody><tr><td>0</td><td>1   2   3</td><td>4   5   6</td><td>7   8   9</td></tr><tr><td>d</td><td>rwx</td><td>r-x</td><td>r-x</td></tr></tbody></table></div><p>-普通文件    d目录文件    l连接文件</p><p>新建文件时默认权限：</p><p>​    对于普通文件类型的权限属性为：666</p><p>​    对于普通目录类型的权限属性为：777</p><p>通过权限掩码，可以控制当前创建出来的文件的权限属性</p><p>更改权限掩码为022</p><p>uamsk 022</p><p>新建的普通文件类型的权限属性将在原有的666基础上减去022即为此时新建文件的权限属性。</p><p>更改权限</p><p>chmod     777 1.txt</p><p>chmod    u=r— 1.txt</p><p>chmod     u-wx 1.txt</p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>测试目录及标题</title>
      <link href="/2018/03/29/%E6%B5%8B%E8%AF%95%E7%9B%AE%E5%BD%95/"/>
      <url>/2018/03/29/%E6%B5%8B%E8%AF%95%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="CCNA学习笔记"><a href="#CCNA学习笔记" class="headerlink" title="CCNA学习笔记"></a>CCNA学习笔记</h1><hr><p>在不放弃分类编址的情况下把大的网络划分成若干个子网,从1985年起IP地址中又增加了一个“子网字段”使两级的IP地址变成了三级IP地址。使多个物理网络可以共用一个网络前缀。这种做法叫做子网划分，已成为正式标准协议。</p><p> 从主机字段借用若干个字段作为子网号，而主机号也就相应减少了若干比特。<br><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ip地址</span>=<span class="string"> 网络号，子网号，主机号</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p> 子网位从主机字段的最左边开始连续借用。<br> 子网掩码：用来划分子网段与主机段。<br> 一般子网号全0或全1不分配，而主机号全为1和全为0是始终不分配的。</p><p> 1993年以后为了最大限度的利用ip地址，internet采用了无分类ip编址方案。即CIDR（无类域间路由）分块方案</p><p> OSI/RM第二层数据链路层通过地理地址进行数据的传送<br>第三层网络层通过IP地址进行数据的传送．<br>物理地址就是MAC地址．<br>IP地址是只在软件中使用的抽象地址. 不论是局域网还是广域网, 发送和接收信息时都依靠的是硬件地址. 所以协议软件发送信息包之前, 必须把IP地址翻译成对应的物理地址, 这个过程称为地址解析(address resolution)</p><p> 默认子网掩码：是分类网络的子网掩码<br> A类网络：255.0.0.0<br> B类网络：255.255.0.0<br> C类网络：255.255.255.0</p><p> 子网地址：网络号和子网号不变，主机号全零，也可以 子网地址 = 主机ip AND 子网掩码。</p><p> 广播地址：一对多进行通讯，主机号为全1</p><p>网络号保留，主机号全0即是该网络的网络地址</p><p>主机号全为一  和全为零是不分配的<br>全0 为网络地址<br>全1 为该网络内的广播地址<br>2811<br>2960<br>2FEW2W</p><p>在此输入正文<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入第二级别   查看</span></span><br><span class="line">enable</span><br><span class="line"><span class="comment">#进入第三级别</span></span><br><span class="line">configure terminal</span><br><span class="line"><span class="comment">#进入第四级别 专项配置</span></span><br><span class="line">interface XXXXXX  </span><br><span class="line"></span><br><span class="line"><span class="comment">#路由器以太网0/0端口打开</span></span><br><span class="line">Router(config)#Interface FastEthernet0/0</span><br><span class="line">Router(config-if)# <span class="literal">no</span> shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment">#路由器ip配置</span></span><br><span class="line">Router(config-if)#ip<span class="built_in"> address </span>192.168.1.100 255.255.255.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看接口摘要</span></span><br><span class="line">show<span class="built_in"> ip interface </span>brief </span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>网关地址：路由器的ip地址</p><p>电脑自动获取ip<br>DHCP：动态主机配置协议<br>需要一个DHCP服务器，任何一个电子设备都可以担当一个服务器<br>成为DHCP服务器的条件</p><ol><li>该设备必须拥有接口或者网卡连接到所需要的</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建名为mypool_1的dhcp池塘</span></span><br><span class="line">ip dhcp<span class="built_in"> pool </span>mypool_1   </span><br><span class="line"></span><br><span class="line"><span class="comment">#关联端口  地址范围</span></span><br><span class="line">network 192.168.1.0 255.255.255.0 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#网关地址 </span></span><br><span class="line">default-router 192.168.1.1 </span><br><span class="line"></span><br><span class="line"><span class="comment">#DNS服务器</span></span><br><span class="line">dns-server 114.114.114.114</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关闭 DNS服务</span></span><br><span class="line">Router(config)#<span class="literal">no</span><span class="built_in"> ip </span>domain-lookup</span><br><span class="line"><span class="comment">#修改默认主机名为R1</span></span><br><span class="line">Router(config)#hostname R1</span><br><span class="line"></span><br><span class="line"><span class="comment">#编写静态路由</span></span><br><span class="line">Router(config)#ip<span class="built_in"> route </span>192.168.3.0 255.255.255.0 192.168.2.1</span><br><span class="line">                            目标路由                下一跳</span><br></pre></td></tr></table></figure><p>同层用交叉线，不同层用直连线</p><p>路由器的作用：</p><ol><li>用于不同网络的互联</li><li>为它所承载的数据做路径的选择—选路</li><li>当数据包进入路由器时，路由器将基于目标ip地址查看本地的路由表；若表中存在记录将无条件按照记录转发，若没有记录将丢弃流量。</li><li><p>默认路由器仅存在直连路由，非直连网段，被称为未知网段。<br>获取未知网段的方法：<br> 1.静态路由：管理员手写<br> 2.动态路由：所以的路由器间使用算法沟通计算，自动生成。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看路由器的路由表</span></span><br><span class="line">show<span class="built_in"> ip </span>route</span><br><span class="line"></span><br><span class="line"><span class="comment">#静态路由写法</span></span><br><span class="line">ip<span class="built_in"> route </span>192.168.3.0 255.255.255.0 192.168.2.2</span><br><span class="line">   前缀            目标网络号          下一跳</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">路由探测</span><br><span class="line">tracert</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>ceshi</title>
      <link href="/2018/03/29/ceshi/"/>
      <url>/2018/03/29/ceshi/</url>
      <content type="html"><![CDATA[<h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><p>[TOC]</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">b =test();</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a = %d, b = %d\n"</span>,a,b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">3</span>, d = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">&amp;a = &amp;c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> d; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Hexo建立博客</title>
      <link href="/2018/03/29/%E4%BD%BF%E7%94%A8Hexo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/03/29/%E4%BD%BF%E7%94%A8Hexo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h2 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h2><blockquote><p>Git, Node.js, Hexo, npm</p><h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><ol><li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">安装Git</a></li><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">安装Node.js</a><br>Node.js安装包中带有npm package manager，默认安装</li><li>安装Hexo<br>可以参考<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo的官方文档</a><br>在一个盘符下建立一个空目录，如<code>F:/Hexo</code>并在<code>cmd</code>中进入到该目录，执行npm安装命令<br><code>npm install -g hexo-cli</code><br>可能会出现几个WARN，但是不用担心，这不会影响正常使用。 然后输入<br><code>npm install hexo --save</code><br>自动将模块和版本号添加到dependencies部分；<br>然后输入<code>hexo -v</code><br>看到hexo的版本号，说明安装成功。</li></ol></blockquote><hr><h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><hr><ol><li>初始化Hexo<br><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">hexo命令官方说明</a><blockquote><p>接着上面，输入<br><code>hexo init</code><br>然后输入<br><code>npm install</code></p></blockquote></li></ol><ol><li>建立本地站点<blockquote><p>生成静态文件<br><code>hexo g</code>   </p><p>部署站点<br><code>hexo d</code><br>启动Hexo本地服务器，预览页面效果<br><code>hexo s</code><br>然后访问<br><a href="http://localhost:4000" target="_blank" rel="noopener">本地站点</a><code>http://localhost:4000</code><br>将会看到初始的hexo页面，到此Hexo配置完成。</p></blockquote></li></ol><hr><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><ol><li><p>安装部署到git的插件<br><code>npm install --save hexo-deployer-git</code></p></li><li><p>安装使用<code>Latex</code> 语法来书写数学公式的插件</p><p><a href="https://blog.csdn.net/u014630987/article/details/78670258" target="_blank" rel="noopener"> 参考博客连接</a></p><p>需要注意的是</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">修改</span><br><span class="line">escape: /^<span class="symbol">\\</span>([<span class="symbol">\\</span>`*&#123;&#125;<span class="symbol">\[</span><span class="symbol">\]</span>()#$+<span class="symbol">\-</span>.!_&gt;])/,</span><br><span class="line">为</span><br><span class="line">escape: /^<span class="symbol">\\</span>([`*<span class="symbol">\[</span><span class="symbol">\]</span>()# +<span class="symbol">\-</span>.!_&gt;])/,</span><br><span class="line"></span><br><span class="line">修改</span><br><span class="line">em: /^<span class="symbol">\b</span>_((?:__|[<span class="symbol">\s</span><span class="symbol">\S</span>])+?)_<span class="symbol">\b</span>|^<span class="symbol">\*</span>((?:<span class="symbol">\*</span><span class="symbol">\*</span>|[<span class="symbol">\s</span><span class="symbol">\S</span>])+?)<span class="symbol">\*</span>(?!<span class="symbol">\*</span>)/,</span><br><span class="line">为</span><br><span class="line">em: /^<span class="symbol">\*</span>((?:<span class="symbol">\*</span><span class="symbol">\*</span>|[<span class="symbol">\s</span><span class="symbol">\S</span>])+?)<span class="symbol">\*</span>(?!<span class="symbol">\*</span>)/,</span><br><span class="line"></span><br><span class="line">被修改的文件是</span><br><span class="line">node_modules<span class="symbol">\k</span>ramed<span class="symbol">\l</span>ib<span class="symbol">\r</span>ules<span class="symbol">\i</span>nline.js</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="配置git个人信息"><a href="#配置git个人信息" class="headerlink" title="配置git个人信息"></a>配置git个人信息</h3><ol><li>设置Git的UserName和Email<blockquote><p><code>git config --global user.name &quot;yourgithub_name&quot;</code><br><code>git config --global user.email &quot;yourgithub_email_account&quot;</code></p></blockquote></li><li>生成密钥<blockquote><p><code>ssh-keygen -t rsa -C</code> <code>&quot;yourgithub_email_account&quot;</code><br> 输入<br> <code>eval &quot;$(ssh-agent -s)&quot;</code><br> 添加密钥到ssh-agent;<br> 再输入<br> <code>ssh-add ~/.ssh/id_rsa</code><br> 添加生成的SSH key到ssh-agent<br> 输入<br> <code>clip&lt; id_rsa.pub</code><br> 将公钥复制到粘贴板;<br> 登录Github，点击头像下的settings，添加Key;<br> 输入<br> <code>ssh -T git@github.com</code>  测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了。</p></blockquote></li><li>问题：假如ssh-key配置失败，那么只要以下步骤就能完全解决<blockquote><p>首先，清除所有的<br> <code>rm -r ~/.ssh</code><br> 删除你在github中的public-key<br> 重新生成ssh密钥对<br> <code>ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;</code><br>重新按上步骤配置key。</p></blockquote></li></ol><h3 id="配置Deployment"><a href="#配置Deployment" class="headerlink" title="配置Deployment"></a>配置Deployment</h3><blockquote><p>在根目录_config.yml文件中，找到Deployment，然后按照如下修改：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:yourname/yourname.github.io.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></p></blockquote><p>比如我的仓库的地址是<code>git@github.com:Macrhard/Macrhard.github.io.git</code>，所以配置如下</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:Macrhard/Macrhard.github.io.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure><h2 id="建立博客及部署"><a href="#建立博客及部署" class="headerlink" title="建立博客及部署"></a>建立博客及部署</h2><ol><li>新建一篇博客，在cmd执行命令：<br><code>hexo new post &quot;标题名&quot;</code><br>这时候在文件夹<code>source\_posts_posts</code>目录下将会看到已经创建的文件。</li><li>使用编辑器编好文章，那么就可以使用命令：<code>hexo d -g</code>，生成以及部署了</li><li>部署成功后访问你的地址：<code>http://用户名.github.io</code>。那么将看到生成的文章</li></ol>]]></content>
      
      
    </entry>
    
  
  
</search>
